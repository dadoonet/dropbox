h1. Dropbox River for Elasticsearch

Welcome to the Dropbox River Plugin for "Elasticsearch":http://www.elasticsearch.org/ 

This river plugin helps to index documents from your dropbox account.

*WARNING*: you need to have the "Attachment Plugin":https://github.com/elasticsearch/elasticsearch-mapper-attachments

h2. Versions

|_. Dropbox River Plugin |_. ElasticSearch|_. Attachment Plugin|
|  master (0.0.1)        |    0.19.8      |       1.4.0        |


h2. Build Status

Thanks to cloudbees for the "build status":https://buildhive.cloudbees.com : !https://buildhive.cloudbees.com/job/dadoonet/job/dropbox/badge/icon(Build Status)!:https://buildhive.cloudbees.com/job/dadoonet/job/dropbox/


h2. Getting Started

h3. Installation

Just type :

<pre>
$ bin\plugin -install dadoonet/dropbox/0.0.1-SNAPSHOT
</pre>

This will do the job...

<pre>
-> Installing dadoonet/dropbox/0.0.1...
Trying https://github.com/downloads/dadoonet/dropbox/dropbox-0.0.1-SNAPSHOT.zip...
Downloading ...DONE
Installed dropbox
</pre>

h3. Get Dropbox credentials (token and secret)

First, you need to create your own application in "Dropbox Developers":https://www.dropbox.com/developers/apps.

Note your AppKey and your AppSecret.

You need then to get an Authorization from the user for this new Application.

Just open the _dropbox REST Endpoint with your apptoken and appsecret parameters: "http://localhost:9200/_dropbox/oauth/apptoken/appsecret":http://localhost:9200/_dropbox/oauth/apptoken/appsecret

You will get back a URL:
<pre>
{"url":"https://www.dropbox.com/1/oauth/authorize?oauth_token=OAUTHTOKEN&oauth_callback=http://localhost:9200/_dropbox/oauth/apptoken/appsecret/secret/"}
</pre>

Open the URL in your browser. You will be asked by Dropbox to Allow your application to access to your dropbox account. 
Then, you will be redirected to the _dropbox REST Endpoint which will give you your user token and secret:

<pre>
{"token":"yourtoken","secret":"yoursecret"}
</pre>

You will just have to use it when you will create the river (see below).

By the way, you can use the SettingUpDropboxTestsCases test class to get a token and a secret for your user.

h3. Creating a Dropbox river

We create first an index to store our @documents@ (optional):

<pre>
$ curl -XPUT 'localhost:9200/mydocs/' -d '{}'
</pre>

We create the river with the following properties :

* AppKey: AAAAAAAAAAAAAAAA
* AppSecret: BBBBBBBBBBBBBBBB
* Token: XXXXXXXXXXXXXXXX
* Secret: YYYYYYYYYYYYYYYY
* Dropbox directory URL: <code>/tmp</code>
* Update Rate: every 15 minutes (15 * 60 * 1000 = 900000 ms)
* Get only docs like <code>*.doc</code> and <code>*.pdf</code>
* Don't index <code>resume*</code>

<pre>
$ curl -XPUT 'localhost:9200/_river/mydocs/_meta' -d '{
  "type": "dropbox",
  "dropbox": {
    "appkey": "AAAAAAAAAAAAAAAA",
    "appsecret": "BBBBBBBBBBBBBBBB",
    "token": "XXXXXXXXXXXXXXXX",
    "secret": "YYYYYYYYYYYYYYYY",
	"name": "My tmp dropbox dir",
	"url": "/tmp",
	"update_rate": 900000,
	"includes": "*.doc,*.pdf",
	"excludes": "resume"
  }
}'
</pre>

h3. Adding another Dropbox river

We add another river with the following properties:

* AppKey: AAAAAAAAAAAAAAAA
* AppSecret: BBBBBBBBBBBBBBBB
* Token: 2XXXXXXXXXXXXXXX
* Secret: 2YYYYYYYYYYYYYYY
* Dropbox directory URL: <code>/tmp</code>
* Update Rate : every hour (60 * 60 * 1000 = 3600000 ms)
* Get only docs like <code>*.doc</code>, <code>*.xls</code> and <code>*.pdf</code>

By the way, we define to index in the same index/type as the previous one:

* index: <code>docs</code>
* type: <code>doc</code>

<pre>
$ curl -XPUT 'localhost:9200/_river/mynewriver/_meta' -d '{
  "type": "dropbox",
  "dropbox": {
    "appkey": "AAAAAAAAAAAAAAAA",
    "appsecret": "BBBBBBBBBBBBBBBB",
    "token": "2XXXXXXXXXXXXXXX",
    "secret": "2YYYYYYYYYYYYYYY",
	"name": "My tmp2 dropbox dir",
	"url": "/tmp2",
	"update_rate": 3600000,
	"includes": [ "*.doc" , "*.xls", "*.pdf" ]
  },
  "index": {
  	"index": "mydocs",
  	"type": "doc",
  	bulk_size: 50
  }
}'
</pre>

Note that you can index from another Dropbox Application account (appkey and appsecret may be different than the previous river).
Note that you can use the same credentials (appkey, appsecret, token, secret) as the previous river if you only want to index another directory.


h3. Searching for docs

This is a common use case in elasticsearch, we want to search for something ;-)

<pre>
$ curl -XGET http://localhost:9200/docs/doc/_search -d '{
  "query" : {
    "text" : {
        "_all" : "I am searching for something !"
    }
  }
}'
</pre>


h2. Advanced

h3. Autogenerated mapping

When the Dropbox river detects a new type, it creates automatically a mapping for this type.

<pre>
{
  "doc" : {
    "properties" : {
      "file" : {
        "type" : "attachment",
        "path" : "full",
        "fields" : {
          "file" : {
            "type" : "string",
            "store" : "yes",
            "term_vector" : "with_positions_offsets"
          },
          "author" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string",
            "store" : "yes"
          },
          "name" : {
            "type" : "string"
          },
          "date" : {
            "type" : "date",
            "format" : "dateOptionalTime"
          },
          "keywords" : {
            "type" : "string"
          },
          "content_type" : {
            "type" : "string"
          }
        }
      },
      "name" : {
        "type" : "string",
        "analyzer" : "keyword"
      },
      "pathEncoded" : {
        "type" : "string",
        "analyzer" : "keyword"
      },
      "postDate" : {
        "type" : "date",
        "format" : "dateOptionalTime"
      },
      "rootpath" : {
        "type" : "string",
        "analyzer" : "keyword"
      },
      "virtualpath" : {
        "type" : "string",
        "analyzer" : "keyword"
      }
    }
  }
}
</pre>

h3. Creating your own mapping (analyzers)

If you want to define your own mapping to set analyzers for example, you can push the mapping before starting the Dropbox River.

<pre>
{
  "doc" : {
    "properties" : {
      "file" : {
        "type" : "attachment",
        "path" : "full",
        "fields" : {
          "file" : {
            "type" : "string",
            "store" : "yes",
            "term_vector" : "with_positions_offsets",
            "analyzer" : "french"
          },
          "author" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string",
            "store" : "yes"
          },
          "name" : {
            "type" : "string"
          },
          "date" : {
            "type" : "date",
            "format" : "dateOptionalTime"
          },
          "keywords" : {
            "type" : "string"
          },
          "content_type" : {
            "type" : "string"
          }
        }
      },
      "name" : {
        "type" : "string",
        "analyzer" : "keyword"
      },
      "pathEncoded" : {
        "type" : "string",
        "analyzer" : "keyword"
      },
      "postDate" : {
        "type" : "date",
        "format" : "dateOptionalTime"
      },
      "rootpath" : {
        "type" : "string",
        "analyzer" : "keyword"
      },
      "virtualpath" : {
        "type" : "string",
        "analyzer" : "keyword"
      }
    }
  }
}
</pre>

To send mapping to Elasticsearch, refer to the "Put Mapping API":http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping.html

h3. Meta fields

Dropbox River creates some meta fields :

|_.    Field      |_.       Description                                               |_.      Example                 |
| name            | Original file name                                                | mydocument.pdf                 |
| pathEncoded     | BASE64 encoded file path (for internal use)                       |112aed83738239dbfe4485f024cd4ce1|
| postDate        | Indexing date                                                     |1312893360000                   |
| rootpath        | BASE64 encoded root path (for internal use)                       |112aed83738239dbfe4485f024cd4ce1|
| virtualpath     | Relative path                                                     | mydir/otherdir                 |


h3. Advanced search

You can use meta fields to perform search on.

<pre>
$ curl -XGET http://localhost:9200/docs/doc/_search -d '{
  "query" : {
    "term" : {
        "name" : "mydocument.pdf"
    }
  }
}'
</pre>

h2. Behind the scene

h3. How it works ?

TO BE COMPLETED


